version: "3"
 
services:

  # Administration
  # ============================

  # adminer:
  #   # Sensor
  #   image: adminer
  #   container_name: adminer
  #   ports: 
  #     - 8080:8080
  #   links:
  #     - postgres-log:db 
  #   restart: always


  # Services - Logging
  # ============================

  postgres-log:
    # Log Database
    image: postgres:latest
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data  
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_LOG_USER}
      - POSTGRES_PASSWORD=${POSTGRES_LOG_PASSWORD}
    ports:
      - ${POSTGRES_LOG_PORT}:5432
    logging:
      driver: json-file 
    restart: always
    deploy:  
      resources:
        limits:
          cpus: '0.2'    # Limits the container to use up to 0.2 CPU cores
          memory: '256M'  # Limits the container to use up to 256 MB of memory
        reservations:
          cpus: '0.1'    # Reserves at least 0.1 CPU cores for the container
          memory: '128M'  # Reserves at least 128 MB of memory for the container

  # logspout:
  #   # Log collector
  #   image: gliderlabs/logspout:latest
  #   ports:
  #     - ${LOGSPOUT_PORT}:514/udp
  #   depends_on:
  #     - postgres-log
  #   links:
  #     - "postgres-log"
  #   volumes:
  #    - //var/run/docker.sock:/var/run/docker.sock
  #   command: syslog://${POSTGRES_LOG_USER}:${POSTGRES_LOG_PASSWORD}@postgres-log:5432/logs/logspout
  
  # audit:
  #   image: linuxkit/auditd
  #   logging:
  #     driver: json-file
  
  fluentd:
    # Log collector
    build: 
      context: ./
      dockerfile: ./services/fluentd/.Dockerfile
    environment:
      - LOG_DATABASE_NAME=${LOG_DATABASE_NAME}
      - LOG_DATABASE_USER=${LOG_DATABASE_USER}
      - LOG_DATABASE_PASSWORD=${LOG_DATABASE_PASSWORD}
      - LOG_DATABASE_TABLE=${LOG_DATABASE_TABLE}
    volumes:
      - ./services/fluentd/fluent.conf:/fluentd/etc/fluent.conf
    depends_on:
      - postgres-log
    links:
      - "elasticsearch"
    ports:
      - "${FLUENTD_PORT}:24224"
      - "${FLUENTD_PORT}:24224/udp"
    logging:
      driver: json-file
    restart: always
    # deploy:  
    #   resources:
    #     limits:
    #       cpus: '0.2'    # Limits the container to use up to 0.5 CPU cores
    #       memory: '256M'  # Limits the container to use up to 256 MB of memory
    #     reservations:
    #       cpus: '0.1'    # Reserves at least 0.2 CPU cores for the container
    #       memory: '128M'  # Reserves at least 128 MB of memory for the container


  # Services - Metrics
  # ============================

  elasticsearch:
    # Data Search
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    logging:
      driver: json-file 
    restart: always

  kibana:
    # Data Visualisation
    image: docker.elastic.co/kibana/kibana:7.13.1
    links:
      - "elasticsearch"
    environment:
      - "XPACK_GRAPH_ENABLED=false"
      - "XPACK_ML_ENABLED=false"
      - "XPACK_REPORTING_ENABLED=false"
      - "XPACK_SECURITY_ENABLED=false"
      - "XPACK_WATCHER_ENABLED=false"
    ports:
      - "${KIBANA_PORT}:5601"
    logging:
      driver: json-file 
    restart: always

  prometheus:
    # Metric collector
    image: prom/prometheus
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}  
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes: 
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
  

  # Services - Networking
  # ============================

  # Virtual Private Name Service
  twingate:
  # Allows name resolution of containers from external networks
    image: twingate/connector:1
    environment:
      - TENANT_URL=${TENANT_URL}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - REFRESH_TOKEN=${REFRESH_TOKEN}
      - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
    depends_on:
      - ${LOG_SERVICE}
    logging:
      driver: json-file 
    restart: always
  
  # firewall:
  #   container_name: firewall

  # Reverse Proxy Router
  reverse-proxy:
    # Forwards requests from outside the network to the requested service
    container_name: reverse_proxy
    build:
      context: ./
      dockerfile: ./reverse_proxy/.Dockerfile
    ports:
      - ${REVERSE_PROXY_PORT}:80
    restart: always
  
  # DNS Blackhole
  dns-sinkhole:
    # Blocks malicious content and adverts from resolving nameservers
    image: patterns/sinkhole
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}

  # Man in the Middle Proxy
  mitm:
    # Allows network traffic introspection
    image: mitmproxy/mitmproxy
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
  
  # VNC Routing
  vnc-server:
    # Forwards X11 sessions of containers over the VNC protocol
    container_name: vnc-server
    build:
      context: .
      dockerfile: ./services/vnc/.Dockerfile
    # Replace 'your-desktop-container' with the name of your container running the desktop environment
    environment:
      - DISPLAY=kali:1
      - DIMENSIONS="1280x720"
      - DEPTH=24
      # Add any other necessary environment variables
    ports:
      - "${VNC_SERVER_PORT}:5900"
  

  # Services - Security
  # =====================
  antivirus:
    # Scans containers for threats
    image: clamav/clamav
    ports:
      - ${ANTIVIRUS_PORT}:3310
    volumes:
      - /path/to/clamav/config:/etc/clamav
    environment:
      - CLAMAV_CONFIG_PATH=/etc/clamav
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    restart: always

  # Services - LLM
  # ============================

  huggingface:
    build:
      context: ./
      dockerfile: ./services/llm/huggingface/.Dockerfile
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "${HUGGINGFACE_PORT}:7860"
    volumes:
      - ./services/llm/huggingface/app:/app
    tty: true

  # Services OSINT
  # =============================

  metasploitable:
    image: tleemcjr/metasploitable2
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    tty: true

  cve-database:
    build:
      context: ./
      dockerfile: ./services/cve_database/.Dockerfile
    environment:
      - DB_HOST=${LOG_DATABASE}
      - DB_NAME=cve
      - DB_USER=${LOG_DATABASE_USER}
      - DB_PASSWORD=${LOG_DATABASE_PASSWORD}
    entrypoint: ["python","/update_cve_db.py"]

  dev-environment:
    image: codercom/code-server:latest
    container_name: dev-environment
    user: 1000:1000
    ports:
      - "${DEV_ENVIRONMENT_PORT}:8080"
    volumes:
      -  ${DEV_ROOT}:/home/coder/
    environment:
      - DOCKER_USER=1000
      - PASSWORD=${ADMIN_PASSWORD}

  python-bootstrap:
    build:
      context: ./
      dockerfile: ./services/python_bootstrap/Dockerfile
    volumes:
      - ./services/python_bootstrap/repos:/app
    environment:
      - GIT_REPO_URL:""
      - GIT_PULL:"true"
      - MAIN_PY_FILE:"app.py"

  # Servers
  # ==============================

  ftp:
    image: delfer/alpine-ftp-server
    ports:
      - "${FTP_PORT}:21"
      - "${FTP_PORT_RANGE}:21000-21010"
    # volumes:
    #   - ${FTP_ROOT}:/ftp
    environment:
      - USERS=${FTP_USERS}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    healthcheck:
      test: curl --fail ftp://localhost:21 || exit 1
      interval: 180s
      retries: 5
      start_period: 20s
      timeout: 10s
    tty: true
    restart: unless-stopped

  alpine-server:
    build:
      context: ./
      dockerfile: ./server/alpine/.Dockerfile
      args:
        ALPINE_IMAGE: ${ALPINE_IMAGE}
        ALPINE_DIGEST : ${ALPINE_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "${ALPINE_SERVER_PORT}:8000"
    volumes:
      - ./server/alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped

  ubuntu-server:
    build:
      context: ./
      dockerfile: ./server/ubnutu/.Dockerfile
      args:
        UBUNTU_SERVER_IMAGE: ${UBUNTU_SERVER_IMAGE}
        UBUNTU_SERVER_DIGEST : ${UBUNTU_SERVER_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "${UBUNTU_SERVER_PORT}:8000"
    volumes:
      - ./server/Alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped

  # Clients - Headless
  # ==============================
  windows-client:
    build:
      context: ./
      dockerfile: ./client/windows/.Dockerfile
      args:
        WINDOWS_IMAGE: ${WINDOWS_IMAGE}
        WINDOWS_DIGEST : ${WINDOWS_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/windows/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}


  android-client:
    build:
      context: ./
      dockerfile: ./client/android/.Dockerfile
      args:
        ANDROID_IMAGE: ${ANDROID_IMAGE}
        ANDROID_DIGEST : ${ANDROID_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./clientandroid/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}

  ios-client:
    build:
      context: ./
      dockerfile: ./client/ios/.Dockerfile
      args:
        IOS_IMAGE: ${IOS_IMAGE}
        IOS_DIGEST : ${IOS_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/ios/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}

  osx-client:
    build:
      context: ./
      dockerfile: ./client/osx/.Dockerfile
      args:
        OSX_IMAGE: ${OSX_IMAGE}
        OSX_DIGEST : ${OSX_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/osx/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE} 

  ubuntu-client:
    build:
      context: ./
      dockerfile: ./client/ubuntu/.Dockerfile
      args:
        UBUNTU_IMAGE : ${UBUNTU_IMAGE}
        UBUNTU_DIGEST : ${UBUNTU_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    ports:
      - "${UBUNTU_CLIENT_PORT}:8000"
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/ubuntu/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}
      - CLIENT_REPO=${CLIENT_REPO}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_USERNAME=${GITHUB_USERNAME}
    # command: /bin/bash
    tty: true


  # Clients - VNC
  # ===================================

  vnc:
    image: dorowu/ubuntu-desktop-lxde-vnc
    depends_on: 
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "6080:80"
    volumes:
      - /dev/shm:/dev/shm
    restart: unless-stopped
  
  kali:
    build:
      context: ./
      dockerfile: ./client/kali/.Dockerfile
    ports: 
      - ${KALI_PORT}:5901
      - ${KALIX11_PORT}:6000
      # - ${KALISSH_PORT}:22
    cap_add:
      - "NET_RAW" 
      - "NET_ADMIN"
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE} 
    # volumes:
    #   - ./client/kali/app:/root 
    environment:
      - USER:${KALI_USER}
      - PASSWORD:${KALI_PASSWORD}
    tty: true
    restart: unless-stopped


# Volumes
# ==============================
# volumes:
#   pgdata:
# secrets:
#   samba-admin-password:
#     file: ./secrets/samba-admin-password


# Example composition
#======================
# # Set the operating mode
# SERVER_MODE="normal" CLIENT_MODE="normal"\ 
#
# # Set the version digest (aquired from hub.docker.com)
# SERVER_DIGEST="@sha:1234abcd..." IOS_DIGEST="@sha:1234abcd..." \
#
# # Set the target repos
# SERVER_REPO="https://github.com/..." CLIENT_REPO="https://github.com/..."\
#
# # Compose the testbench
# docker compose up server ios-client
#
# This will start both a server and IOS client container connected on a network
#
# docker compose run -e SERVER_MODE="normal" CLIENT_MODE="normal"\ 
# -e SERVER_DIGEST="sha256:b6ca290b6b4cdcca5b3db3ffa338ee0285c11744b4a6abaa9627746ee3291d8d" -e UBNUTU_DIGEST="sha256:7a57c69fe1e9d5b97c5fe649849e79f2cfc3bf11d10bbd5218b4eb61716aebe6"
# -e SERVER_REPO="https://gist.github.com/BoeJaker/86659a8e647496a5f5b24b33048f739a" -e CLIENT_REPO="https://gist.github.com/BoeJaker/6d30208bd42b3769f593a9e95e29a873"\
# server ubuntu-client
#
#You can also set environment variables via the .env file, see env.dummy for more info
#
# See REAME.md for more information