version: "3"
 
services:

  # Administration
  # ============================

  adminer:
    image: adminer
    ports: 
      - 8080:8080
    links:
      - postgres-log:db 
    restart: always


  # Services - Logging
  # ============================

  postgres-log:
    image: postgres:latest
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data  
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_LOG_USER}
      - POSTGRES_PASSWORD=${POSTGRES_LOG_PASSWORD}
    ports:
      - 5432:5432
    logging:
      driver: json-file 
    restart: always
    deploy:  
      resources:
        limits:
          cpus: '0.2'    # Limits the container to use up to 0.2 CPU cores
          memory: '256M'  # Limits the container to use up to 256 MB of memory
        reservations:
          cpus: '0.1'    # Reserves at least 0.1 CPU cores for the container
          memory: '128M'  # Reserves at least 128 MB of memory for the container

  # logspout:
  #   image: gliderlabs/logspout:latest
  #   ports:
  #     - 514:514/udp
  #   depends_on:
  #     - postgres-log
  #   links:
  #     - "postgres-log"
  #   volumes:
  #    - //var/run/docker.sock:/var/run/docker.sock
  #   command: syslog://${POSTGRES_LOG_USER}:${POSTGRES_LOG_PASSWORD}@postgres-log:5432/logs/logspout
  
  audit:
    image: linuxkit/auditd
    logging:
      driver: json-file
  
  fluentd:
    build: 
      context: ./
      dockerfile: ./services/fluentd/.Dockerfile
    environment:
      - LOG_DATABASE_NAME=${LOG_DATABASE_NAME}
      - LOG_DATABASE_USER=${LOG_DATABASE_USER}
      - LOG_DATABASE_PASSWORD=${LOG_DATABASE_PASSWORD}
      - LOG_DATABASE_TABLE=${LOG_DATABASE_TABLE}
    volumes:
      - ./services/fluentd/fluent.conf:/fluentd/etc/fluent.conf
    depends_on:
      # - kibana
      # - elasticsearch
      - postgres-log
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    logging:
      driver: json-file
    restart: always
    deploy:  
      resources:
        limits:
          cpus: '0.2'    # Limits the container to use up to 0.5 CPU cores
          memory: '256M'  # Limits the container to use up to 256 MB of memory
        reservations:
          cpus: '0.1'    # Reserves at least 0.2 CPU cores for the container
          memory: '128M'  # Reserves at least 128 MB of memory for the container


  # Services - Metrics
  # ============================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
    expose:
      - "9200"
    ports:
      - "9200:9200"
    logging:
      driver: json-file 
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    links:
      - "elasticsearch"
    environment:
      - "XPACK_GRAPH_ENABLED=false"
      - "XPACK_ML_ENABLED=false"
      - "XPACK_REPORTING_ENABLED=false"
      - "XPACK_SECURITY_ENABLED=false"
      - "XPACK_WATCHER_ENABLED=false"
    ports:
      - "5601:5601"
    logging:
      driver: json-file 
    restart: always

  prometheus:
    image: prom/prometheus
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}  
    ports:
      - "9090:9090"
    volumes: 
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
  

  # Services - Networking
  # ============================

  twingate:
    image: twingate/connector:1
    environment:
      - TENANT_URL=${TENANT_URL}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - REFRESH_TOKEN=${REFRESH_TOKEN}
      - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
    depends_on:
      - ${LOG_SERVICE}
    logging:
      driver: json-file 
    restart: always

  ingress-controller:
    image: bitnami/nginx-ingress-controller
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    restart: always

  domain-controller:
    image: instantlinux/samba-dc
    environment:
      - NETBIOS_NAME="boejaker"
      - REALM="workspace.com"
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    network_mode: host  
    cap_add:
      - CAP_SYS_ADMIN
    secrets:
      - samba-admin-password
    
  dns-sinkhole:
    image: patterns/sinkhole
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}

  mitm:
    image: mitmproxy/mitmproxy
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}

  antivirus:
    image: clamav/clamav
    ports:
      - 3310:3310
    volumes:
      - /path/to/clamav/config:/etc/clamav
    environment:
      - CLAMAV_CONFIG_PATH=/etc/clamav
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    restart: always

  
  # Services - LLM
  # ============================

  huggingface:
    build:
      context: ./
      dockerfile: ./services/llm/huggingface/.Dockerfile
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "8888:7860"
    volumes:
      - ./services/llm/huggingface/app:/app
    tty: true

  freedomgpt:
    build:
      context: ./
      dockerfile: ./services/llm/freedomGPT/.Dockerfile
      args:
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "8889:7869"
    volumes:
      - ./services/llm/freedomGPT/app:/app
    tty: true

  # Services OSINT
  # =============================

  metasploitable:
    image: tleemcjr/metasploitable2
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    tty: true

  cve_database:
    build:
      context: ./
      dockerfile: ./services/cve_database/.Dockerfile
    environment:
      - DB_HOST=${LOG_DATABASE}
      - DB_NAME=cve
      - DB_USER=${LOG_DATABASE_USER}
      - DB_PASSWORD=${LOG_DATABASE_PASSWORD}
    entrypoint: ["python","/update_cve_db.py"]

  # Servers
  # ==============================

  ftp:
    image: delfer/alpine-ftp-server
    ports:
      - "22:21"
      - "21000-21010:21000-21010"
    # volumes:
    #   - ${FTP_ROOT}:/ftp
    environment:
      - USERS=${FTP_USERS}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    healthcheck:
      test: curl --fail ftp://localhost:21 || exit 1
      interval: 180s
      retries: 5
      start_period: 20s
      timeout: 10s
    tty: true
    restart: unless-stopped

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - VERSION=docker
      # - PLEX_CLAIM= #optional
    # ports:
    #   - 32400:32400 # Media Server
    #   - 1900:1900 # DLNA
    #   - 32469:32469 # DLNA
    #   - 5353:5353 # Bonjour
    #   - 8324:8324 # Plex companion
    volumes:
      # - /path/to/library:/config
      - /media:/tv
      - /media:/movies
    restart: unless-stopped
  
  qtbittorrent:
    image: wernight/qbittorrent:latest
    user: $UID:$GID
    ports:
      - 8080:8080 
      - 6881:6881/tcp 
      - 6881:6881/udp 
    volumes:
    - /media/config:/config 
    - /media/torrents:/torrents 
    - /media/downloads:/downloads 
  
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - AUTO_UPDATE=true #optional
      - RUN_OPTS= #optional
    volumes:
      - /media/config:/config
      - /media/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
  
  protonwire:
    container_name: protonwire
    # Use semver tags or sha256 hashes of manifests.
    # using latest tag can lead to issues when used with
    # automatic image updaters like watchtower.
    image: ghcr.io/tprasadtp/protonwire:latest
    init: true
    restart: unless-stopped
    environment:
      # Quote this value as server name can contain '#'.
      PROTONVPN_SERVER: "nl-free-127.protonvpn.net"
      # Set this to 1 to show debug logs for issue forms.
      DEBUG: "0"
      # Set this to 0 to disable kill-switch.
      KILL_SWITCH: "1"
    # NET_ADMIN capability is mandatory!
    cap_add:
      - NET_ADMIN
    # sysctl net.ipv4.conf.all.rp_filter is mandatory!
    # net.ipv6.conf.all.disable_ipv6 disables IPv6 as protonVPN does not support IPv6.
    # 'net.*' sysctls are not required on application containers,
    # as they share network stack with protonwire container.
    sysctls:
      net.ipv4.conf.all.rp_filter: 2
      net.ipv6.conf.all.disable_ipv6: 1
    volumes:
      - type: tmpfs
        target: /tmp
      - type: bind
        source: private.key
        target: /etc/protonwire/private-key
        read_only: true
    ports:
      - 8000:80

  alpine-server:
    build:
      context: ./
      dockerfile: ./server/alpine/.Dockerfile
      args:
        ALPINE_IMAGE: ${ALPINE_IMAGE}
        ALPINE_DIGEST : ${ALPINE_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "8000:8000"
    volumes:
      - ./server/alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped

  ubuntu-server:
    build:
      context: ./
      dockerfile: ./server/ubnutu/.Dockerfile
      args:
        UBUNTU_SERVER_IMAGE: ${UBUNTU_SERVER_IMAGE}
        UBUNTU_SERVER_DIGEST : ${UBUNTU_SERVER_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "8000:8000"
    volumes:
      - ./server/Alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped

  # Clients - Headless
  # ==============================
  windows-client:
    build:
      context: ./
      dockerfile: ./client/windows/.Dockerfile
      args:
        WINDOWS_IMAGE: ${WINDOWS_IMAGE}
        WINDOWS_DIGEST : ${WINDOWS_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/windows/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}


  android-client:
    build:
      context: ./
      dockerfile: ./client/android/.Dockerfile
      args:
        ANDROID_IMAGE: ${ANDROID_IMAGE}
        ANDROID_DIGEST : ${ANDROID_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./clientandroid/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}

  ios-client:
    build:
      context: ./
      dockerfile: ./client/ios/.Dockerfile
      args:
        IOS_IMAGE: ${IOS_IMAGE}
        IOS_DIGEST : ${IOS_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/ios/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}

  osx-client:
    build:
      context: ./
      dockerfile: ./client/osx/.Dockerfile
      args:
        OSX_IMAGE: ${OSX_IMAGE}
        OSX_DIGEST : ${OSX_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/osx/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE} 

  ubuntu-client:
    build:
      context: ./
      dockerfile: ./client/ubuntu/.Dockerfile
      args:
        UBUNTU_IMAGE : ${UBUNTU_IMAGE}
        UBUNTU_DIGEST : ${UBUNTU_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    ports:
      - "80:8000"
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE}
    volumes:
      - ./client/ubuntu/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}
      - CLIENT_REPO=${CLIENT_REPO}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_USERNAME=${GITHUB_USERNAME}
    # command: /bin/bash
    tty: true


  # Clients - VNC
  # ===================================

  vnc:
    image: dorowu/ubuntu-desktop-lxde-vnc
    depends_on: 
      - ${LOG_SERVICE}
      - ${SERVICE}
    ports:
      - "6080:80"
    volumes:
      - /dev/shm:/dev/shm
    restart: unless-stopped
  
  kali:
    build:
      context: ./
      dockerfile: ./client/kali/.Dockerfile
    ports: 
      - 5900:5900
      - 5901:5901
      - 6000:6000
      # - 22:22
    cap_add:
      - "NET_RAW" 
      - "NET_ADMIN"
    depends_on:
      - ${LOG_SERVICE}
      - ${SERVICE} 
    # volumes:
    #   - ./client/kali/app:/root 
    environment:
      - USER:${KALI_USER}
      - PASSWORD:${KALI_PASSWORD}
    tty: true
    restart: unless-stopped


# Volumes
# ==============================
# volumes:
#   pgdata:
secrets:
  samba-admin-password:
    file: ./secrets/samba-admin-password


# Example composition
#======================
# # Set the operating mode
# SERVER_MODE="normal" CLIENT_MODE="normal"\ 
#
# # Set the version digest (aquired from hub.docker.com)
# SERVER_DIGEST="@sha:1234abcd..." IOS_DIGEST="@sha:1234abcd..." \
#
# # Set the target repos
# SERVER_REPO="https://github.com/..." CLIENT_REPO="https://github.com/..."\
#
# # Compose the testbench
# docker compose up server ios-client
#
# This will start both a server and IOS client container connected on a network
#
# docker compose run -e SERVER_MODE="normal" CLIENT_MODE="normal"\ 
# -e SERVER_DIGEST="sha256:b6ca290b6b4cdcca5b3db3ffa338ee0285c11744b4a6abaa9627746ee3291d8d" -e UBNUTU_DIGEST="sha256:7a57c69fe1e9d5b97c5fe649849e79f2cfc3bf11d10bbd5218b4eb61716aebe6"
# -e SERVER_REPO="https://gist.github.com/BoeJaker/86659a8e647496a5f5b24b33048f739a" -e CLIENT_REPO="https://gist.github.com/BoeJaker/6d30208bd42b3769f593a9e95e29a873"\
# server ubuntu-client
#
#You can also set environment variables via the .env file, see env.dummy for more info
#
# See REAME.md for more information