version: "3"
 
services:

  dashboard:
    container_name: dashboard
    hostname: dashboard
    restart: unless-stopped
    build:
      context: ./services/dashboard/
      dockerfile: ./Dockerfile
    # working_dir: /app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/dashboard/Landing_Page.py:/Landing_Page.py
      - ./services/dashboard/templates/:/templates
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    ports:
      - "81:5555"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`, `dashboard.traefik.internal`,`dashboard.int`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=5555"
      - "traefik.http.services.dashboard.loadbalancer.server.scheme=http"
      - "traefik.http.middlewares.dashboard.stripprefix.prefixes=/dashboard"
      - "traefik.http.middlewares.dashboard.stripprefix.forceSlash=false"
      - "traefik.http.routers.dashboard.middlewares=dashboard, dashboard-auth, my-fail2ban@file"
      - "traefik.http.middlewares.dashboard-auth.basicauth.usersfile=/htpasswd.txt"
      - "function.port.5555=Webpage that lists all services"
    networks:
      - traefik
      # - logging
  
  
  # Services - LLM
  # ============================

  huggingface:
    container_name: huggingface
    build:
      context: ./
      dockerfile: ./services/llm/huggingface/.Dockerfile
    ports:
      - "${HUGGINGFACE_PORT}:7860"
    volumes:
      - ./services/llm/huggingface/app:/app
    tty: true
    restart: unless-stopped
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'


  # Services Development Environment
  # =============================


  vulnlab:
    container_name: vulnlab
    image: yavuzlar/vulnlab:latest
    # ports:
    #   - 1337:80
    restart: unless-stopped
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vulnlab.rule=Host(`vulnlab.localhost`, `vulnlab.int`, `vulnlab.traefik.internal`) || PathPrefix(`/vulnlab`)"
      - "traefik.http.services.vulnlab.loadbalancer.server.port=80"
      - "traefik.http.routers.vulnlab.entrypoints=web"
      - "traefik.http.middlewares.vulnlab.stripprefix.prefixes=/vulnlab"
      - "traefik.http.middlewares.vulnlab.stripprefix.forceSlash=false"
      - "function.port.80=Vulnerability Playground"
    networks:
      - traefik

  it-tools:
    container_name: it-tools
    image: corentinth/it-tools:latest
    restart: unless-stopped
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    ports:
      - 8880:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tools.rule=Host(`tools.localhost`, `tools.int`, `tools.traefik.internal`) || PathPrefix(`/tools`)"
      - "traefik.http.services.tools.loadbalancer.server.port=80"
      - "traefik.http.routers.tools.entrypoints=web"
      - "traefik.http.middlewares.tools.stripprefix.prefixes=/tools"
      - "traefik.http.middlewares.tools.stripprefix.forceSlash=false"
      - "function.port.80=Vulnerability Playground"
    networks:
      - traefik

  dev-environment:
    image: codercom/code-server:latest
    container_name: dev-environment
    user: 1000:1000
    restart: unless-stopped
    environment:
      - DEV_HTTP_PORT=${DEV_HTTP_PORT}
      - IP_ADDRESS=${IP_ADDRESS}
    ports:
      - "${DEV_ENVIRONMENT_PORT}:8080"
    volumes:
      -  ${DEV_ROOT}:/home/coder/
    environment:
      - DOCKER_USER=1000
      - PASSWORD=${ADMIN_PASSWORD}
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-environment.rule=Host(`dev-environment.localhost`, `dev-environment.traefik.internal`, `dev-environment.int`) || PathPrefix(`/dev-environment`)"
      - "traefik.http.services.dev-environment.loadbalancer.server.port=8080"
      - "traefik.http.services.dev-environment.loadbalancer.server.scheme=http"
      - "traefik.http.middlewares.dev-environment.stripprefix.prefixes=/dev-environment"
      - "traefik.http.middlewares.dev-environment.stripprefix.forceSlash=false"
      - "traefik.http.routers.dev-environment.middlewares=dev-environment, dev-environment-auth"
      - "traefik.http.middlewares.dev-environment-auth.basicauth.usersfile=/htpasswd.txt"
      - "function.port.8080=Development Environment"
    networks:
      - traefik

  python-bootstrap:
    hostname: python-bootstrap
    build:
      context: ./services/python_bootstrap/
      dockerfile: ./Dockerfile
    working_dir: /app
    volumes:
      - ./services/python_bootstrap/app:/app
    environment:
      - GIT_REPO_URL:""
      - GIT_PULL:"true"
      - MAIN_PY_FILE:"app.py"
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    # ports:
    #   - "5001:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.python-bootstrap.rule=Host(`python-bootstrap.localhost`, `python-bootstrap.traefik.internal`, `pythonbootstrap.int`) || PathPrefix(`/python-bootstrap`)"
      - "traefik.http.services.python-bootstrap.loadbalancer.server.port=5000"
      - "traefik.http.services.python-bootstrap.loadbalancer.server.scheme=https"
      - "traefik.http.middlewares.python-bootstrap.stripprefix.prefixes=/python-bootstrap"
      - "traefik.http.middlewares.python-bootstrap.stripprefix.forceSlash=false"
      - "traefik.http.routers.python-bootstrap.middlewares=python-bootstrap"
      - "function.port.5000=Python Bootstrap Environmet"
    networks:
      - traefik

  game-scanner:
    container_name: game-scanner
    build:
      context: ./services/game_scanner/
      dockerfile: ./Dockerfile
    working_dir: /app
    volumes:
      - ./services/game_scanner/app:/app
    environment:
      - GIT_REPO_URL:""
      - GIT_PULL:"true"
      - MAIN_PY_FILE:"gsheetoauth.py"
    # ports:
    #   - "5000:5000"   
    logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '192.168.3.201:24224'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.game-scanner.rule=Host(`game-scanner.localhost`, `game-scanner.traefik.internal`, `game-scanner.int`) || PathPrefix(`/game-scanner`)"
      - "traefik.http.services.game-scanner.loadbalancer.server.port=5000"
      - "traefik.http.services.game-scanner.loadbalancer.server.scheme=https"
      - "traefik.http.middlewares.game-scanner.stripprefix.prefixes=/game-scanner"
      - "traefik.http.middlewares.game-scanner.stripprefix.forceSlash=false"
      - "traefik.http.routers.game-scanner.middlewares=game-scanner"
      - "function.port.5000=Retroboe Video Game Scanner"
    networks:
      - traefik
      - webrequests

  # Servers
  # ==============================
  alpine-server:
    build:
      context: ./
      dockerfile: ./server/alpine/.Dockerfile
      args:
        ALPINE_IMAGE: ${ALPINE_IMAGE}
        ALPINE_DIGEST : ${ALPINE_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    ports:
      - "${ALPINE_SERVER_PORT}:8000"
    volumes:
      - ./server/alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped


  ubuntu-server:
    build:
      context: ./
      dockerfile: ./server/ubnutu/.Dockerfile
      args:
        UBUNTU_SERVER_IMAGE: ${UBUNTU_SERVER_IMAGE}
        UBUNTU_SERVER_DIGEST : ${UBUNTU_SERVER_DIGEST}
        SERVER_REPO : ${SERVER_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    ports:
      - "${UBUNTU_SERVER_PORT}:8000"
    volumes:
      - ./server/Alpine/app:/app
    tty: true
    environment:
      - SERVER_MODE=${SERVER_MODE}
    restart: unless-stopped

  # Clients - Headless
  # ==============================
 
  android-client:
    build:
      context: ./
      dockerfile: ./client/android/.Dockerfile
      args:
        ANDROID_IMAGE: ${ANDROID_IMAGE}
        ANDROID_DIGEST : ${ANDROID_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    volumes:
      - ./clientandroid/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}

  osx-client:
    build:
      context: ./
      dockerfile: ./client/osx/.Dockerfile
      args:
        OSX_IMAGE: ${OSX_IMAGE}
        OSX_DIGEST : ${OSX_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    volumes:
      - ./client/osx/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE} 


  ubuntu-client:
    build:
      context: ./
      dockerfile: ./client/ubuntu/.Dockerfile
      args:
        UBUNTU_IMAGE : ${UBUNTU_IMAGE}
        UBUNTU_DIGEST : ${UBUNTU_DIGEST}
        CLIENT_REPO : ${CLIENT_REPO}
        GITHUB_TOKEN : ${GITHUB_TOKEN}
        GITHUB_USERNAME : ${GITHUB_USERNAME}
    ports:
      - "${UBUNTU_CLIENT_PORT}:8000"
    volumes:
      - ./client/ubuntu/app:/app
    environment:
      - CLIENT_MODE=${CLIENT_MODE}
      - CLIENT_REPO=${CLIENT_REPO}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_USERNAME=${GITHUB_USERNAME}
    # command: /bin/bash
    tty: true

# Volumes
# ==============================
volumes:
  
  pgdata:
  
  logs:
  
  crowdsec-db:

  crowdsec-config:


# Networks
# ==============================
networks:

  webrequests:
    # external: true

  logging:  
    external: true

  postgres:
    external: true

  traefik:
    external: true


# Example composition (old)
#======================
# # Set the operating mode
# SERVER_MODE="normal" CLIENT_MODE="normal"\ 
#
# # Set the version digest (aquired from hub.docker.com)
# SERVER_DIGEST="@sha:1234abcd..." IOS_DIGEST="@sha:1234abcd..." \
#
# # Set the target repos
# SERVER_REPO="https://github.com/..." CLIENT_REPO="https://github.com/..."\
#
# # Compose the testbench
# docker compose up server ios-client
#
# This will start both a server and IOS client container connected on a network
#
# docker compose run -e SERVER_MODE="normal" CLIENT_MODE="normal"\ 
# -e SERVER_DIGEST="sha256:b6ca290b6b4cdcca5b3db3ffa338ee0285c11744b4a6abaa9627746ee3291d8d" -e UBNUTU_DIGEST="sha256:7a57c69fe1e9d5b97c5fe649849e79f2cfc3bf11d10bbd5218b4eb61716aebe6"
# -e SERVER_REPO="https://gist.github.com/BoeJaker/86659a8e647496a5f5b24b33048f739a" -e CLIENT_REPO="https://gist.github.com/BoeJaker/6d30208bd42b3769f593a9e95e29a873"\
# server ubuntu-client
#
#You can also set environment variables via the .env file, see env.dummy for more info
#
# See REAME.md for more information
